/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */
// Settings
// ==================================================
$hamburger-padding-x = 0px
$hamburger-padding-y = 0px
$hamburger-layer-width = 36px
$hamburger-layer-height = 3px
$hamburger-layer-spacing = 7px
$hamburger-layer-color = $cWhite
$hamburger-layer-border-radius = 0px
$hamburger-hover-opacity = 0.7
$hamburger-hover-transition-duration = 0.15s
$hamburger-hover-transition-timing-function = linear
// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter = false
$hamburger-hover-filter = opacity(50%)
// Types (Remove or comment out what you donâ€™t need)
// ==================================================
/*$hamburger-types = 3dx, 3dx -r, 3dy, 3dy -r, 3dxy, 3dxy -r, arrow, arrow-r, arrowalt, arrowalt-r, arrowturn, arrowturn-r, boring, collapse, collapse-r, elastic, elastic-r, emphatic, emphatic-r, minus, slider, slider-r, spin, spin-r, spring, spring-r, stand, stand-r, squeeze, vortex, vortex-r*/
$hamburger-types = squeeze


// Base Hamburger (We need this)
// ==================================================
// Hamburger types
// ==================================================
//@import 'types/3dx'
//@import 'types/3dx-r'
//@import 'types/3dy'
//@import 'types/3dy-r'
//@import 'types/3dxy'
//@import 'types/3dxy-r'
//@import 'types/arrow'
//@import 'types/arrow-r'
//@import 'types/arrowalt'
//@import 'types/arrowalt-r'
//@import 'types/arrowturn'
//@import 'types/arrowturn-r'
//@import 'types/boring'
//@import 'types/collapse'
//@import 'types/collapse-r'
//@import 'types/elastic'
//@import 'types/elastic-r'
//@import 'types/emphatic'
//@import 'types/emphatic-r'
//@import 'types/minus'
//@import 'types/slider'
//@import 'types/slider-r'
//@import 'types/spin'
//@import 'types/spin-r'
//@import 'types/spring'
//@import 'types/spring-r'
//@import 'types/stand'
//@import 'types/stand-r'
@import 'types/squeeze'
//@import 'types/vortex'
//@import 'types/vortex-r'
// ==================================================
// Cooking up additional types:
//
// The Stylus for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in $hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index($hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }



// Hamburger Base
// ==================================================
.hamburger
  padding: $hamburger-padding-y $hamburger-padding-x
  display: inline-block
  cursor: pointer
  transition-property: opacity, filter
  transition-duration: $hamburger-hover-transition-duration
  transition-timing-function: $hamburger-hover-transition-timing-function
// Normalize (<button>)
  font: inherit
  color: inherit
  text-transform: none
  background-color: transparent
  border: 0
  margin: 0
  overflow: visible
  &:hover
    if $hamburger-hover-use-filter == true
      filter: $hamburger-hover-filter
    else
      opacity: $hamburger-hover-opacity
.hamburger-box
  width: $hamburger-layer-width
  height: ($hamburger-layer-height * 3 + $hamburger-layer-spacing * 2)
  display: inline-block
  position: relative
.hamburger-inner
  display: block
  top: 50%
  margin-top: ($hamburger-layer-height / -2)
  &,
  &::before,
  &::after
    width: $hamburger-layer-width
    height: $hamburger-layer-height
    background-color: $hamburger-layer-color
    border-radius: $hamburger-layer-border-radius
    position: absolute
    transition-property: transform
    transition-duration: 0.15s
    transition-timing-function: ease
  &::before,
  &::after
    content: ""
    display: block
  &::before
    top: (($hamburger-layer-spacing + $hamburger-layer-height) * -1)
  &::after
    bottom: (($hamburger-layer-spacing + $hamburger-layer-height) * -1)

